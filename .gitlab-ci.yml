# vars in gitlab-ci env:
#  RUNNER_IMAGE: docker.io/oboehmer/dnac-pipeline-runner built off env/Dockerfile in this repo

stages:
  - validate
  - provision
  - deploy
  - test
  - notify

# we want to use different deployment parameters (i.e. different DNAC 
# server and/or project) and different notification rules depending on 
# if we run in main branch or in non-main branches
before_script:
  - source scripts/vars.sh

# perform some input validation of the templates and deploy yaml files
validate:
  image: ${RUNNER_IMAGE}
  stage: validate
  script:
    - python scripts/validate.py

# provision templates on DNAC, delete those which have been removed from the repo
provision_templates:
  image: ${RUNNER_IMAGE}
  stage: provision

  artifacts:
    when: always
    paths:
      - results-1-provision.json
  script:
    - python scripts/provision_templates.py --config $CONFIG_YAML --template_dir $TEMPLATE_DIR --results results-1-provision.json $DEBUG
  # use for debug in-container
  # after_script:
  #   - tail -f /dev/null 

preview_templates:
  image: ${RUNNER_IMAGE}
  stage: deploy
  artifacts:
    when: always
    paths:
      - template-preview.txt
  script:
    - python scripts/preview_templates.py --config $CONFIG_YAML --outfile template-preview.txt --deploy_dir $DEPLOY_DIR $DEBUG

#  deploy templates on devices (environment controlled through vars.sh settigns)
deploy_templates:
  image: ${RUNNER_IMAGE}
  stage: deploy
  artifacts:
    when: always
    paths:
      - results-2-deploy.json
  script:
    - python scripts/deploy_templates.py --config $CONFIG_YAML --deploy_dir $DEPLOY_DIR --results results-2-deploy.json $DEBUG

# render and run tests
test:
  image: ${RUNNER_IMAGE}
  stage: test
  artifacts:
    when: always
    paths:
      - tests/out/*
      - tests/deploy/*
      - results-3-tests.json
    reports:
      # test results also shown in gitlab's test tab
      junit: tests/out/output-junit.xml
  script:
    - rm -rf tests/deploy || true
    - python scripts/render_tests.py --config $CONFIG_YAML --deploy_dir $DEPLOY_DIR --out_dir tests/deploy/ $DEBUG
    # run all robot in this directory (recursively)
    - cd tests
    - robot --name 'DNAC Template Tests' --outputdir out/ --xunit output-junit.xml --variable testbed:$TESTBED --extension robot .
  after_script:
    - python scripts/parse_testresults.py tests/out/output.xml results-3-tests.json

# last step in the pipeline to report status
notify_success:
  image: ${RUNNER_IMAGE}
  stage: notify
  when: on_success
  script:
    - ATTACH="" ; for f in tests/out/log.html template-preview.txt  ; do test -f $f && ATTACH="$ATTACH --attach $f"; done; echo $ATTACH
    - RESULTS="" ; for f in results*json ; do test -f $f && RESULTS="$RESULTS --results $f" ; done ; echo $RESULTS
    - python scripts/notify.py --config $CONFIG_YAML $ATTACH $RESULTS  "✅ Pipeline on branch \"$CI_BUILD_REF_NAME\" completed successfully ($CI_PIPELINE_URL)"

notify_failure:
  image: ${RUNNER_IMAGE}
  stage: notify
  when: on_failure
  script:
    - ATTACH="" ; for f in tests/out/log.html template-preview.txt  ; do test -f $f && ATTACH="$ATTACH --attach $f"; done; echo $ATTACH
    - RESULTS="" ; for f in results*json ; do test -f $f && RESULTS="$RESULTS --results $f" ; done ; echo $RESULTS
    - python scripts/notify.py --config $CONFIG_YAML $ATTACH $RESULTS "❌ Pipeline on branch \"$CI_BUILD_REF_NAME\" failed ($CI_PIPELINE_URL)"
